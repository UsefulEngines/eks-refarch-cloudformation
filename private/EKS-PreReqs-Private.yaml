---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Template to create EKS VPC, 3 Public Subnets, 3 Private Subnets, EKS_ControlPlane_SecurityGroup, EKS_ServiceRole, CFNServiceRole '

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.1.0/24
    Description: CidrBlock for PublicSubnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.2.0/24
    Description: CidrBlock for PublicSubnet 02 within the VPC

  PublicSubnet03Block:
    Type: String
    Default: 192.168.3.0/24
    Description: CidrBlock for PublicSubnet 03 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.4.0/24
    Description: CidrBlock for PrivateSubnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.5.0/24
    Description: CidrBlock for PrivateSubnet 02 within the VPC

  PrivateSubnet03Block:
    Type: String
    Default: 192.168.6.0/24
    Description: CidrBlock for PrivateSubnet 03 within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EKS Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PublicSubnet03Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - PrivateSubnet03Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-PublicSubnets'
      - Key: Network
        Value: Public

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet03Block
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet03"


  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  NatGateway01:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP01.AllocationId
      SubnetId: !Ref PublicSubnet01

  NatGateway02:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP02.AllocationId
      SubnetId: !Ref PublicSubnet02

  NatGateway03:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP03.AllocationId
      SubnetId: !Ref PublicSubnet03

  NatEIP01:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP02:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP03:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-1"

  NatRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-2"

  NatRouteTable03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-3"
  
  NatRoute01:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  NatRoute02:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatRoute03:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway03

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref NatRouteTable01

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref NatRouteTable02

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref NatRouteTable03
  
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: PrivateSubnet 01
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 
        Ref: PrivateSubnet01Block
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: PrivateSubnet 02
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 
        Ref: PrivateSubnet02Block
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"

  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: PrivateSubnet 03
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 
        Ref: PrivateSubnet03Block
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet03"

  
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  
  CFNServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
            - "eks:*"
            Resource: "*"
          - 
            Effect: "Allow"
            Action: 
            - "ec2:Create*"
            - "ec2:Describe*"
            - "ec2:List*"
            - "ec2:AuthorizeSecurity*"
            - "ec2:RevokeSecurity*"
            - "ec2:UpdateSecurity*"
            - "ec2:DeleteSecurityGroup*"
            - "ec2:RunInstances"
            - "ec2:TerminateInstances"
            Resource: "*"
          - 
            Effect: "Allow"
            Action: 
            - "iam:Create*"
            - "iam:List*"
            - "iam:Add*"
            - "iam:Attach*"
            - "iam:Detach*"
            - "iam:Get*"
            - "iam:Tag*"
            - "iam:Update*"
            - "iam:PassRole"
            - "iam:PutRole*"
            - "iam:DeleteRole*"
            - "iam:RemoveRole*"
            - "iam:DeleteInstanceProfile"
            Resource: "*"
          - 
            Effect: "Allow"
            Action: 
            - "autoscaling:Create*"
            - "autoscaling:Describe*"
            - "autoscaling:Update*"
            - "autoscaling:Attach*"
            - "autoscaling:Put*"
            - "autoscaling:Set*"
            - "autoscaling:DeleteLaunchConfiguration"
            - "autoscaling:DeleteAutoScalingGroup"
            Resource: "*"
      Roles: 
        - 
          Ref: "CFNServiceRole"

  #CFNServiceRole will be used as a CloudFormation Service role to create EKS Master and Worker nodes.
  CFNServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole

Outputs:

  PublicSubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PublicSubnet03 ] ]

  PrivateSubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02, !Ref PrivateSubnet03 ] ]

  ControlPlaneSecurityGroup:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  EKSServiceRoleArn:
    Description: The IAM Role that EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSServiceRole.Arn

  CFNServiceRole:
    Description: The IAM Role will be used to create AWS resources like EKS Master and Worker Nodes in EKS Infrastructure template. This will be recorded in the K8sRBAC.
    Value: !Ref CFNServiceRole
  
  CFNServiceRoleArn:
    Description: The IAM Role will be used to create AWS resources like EKS Master and Worker Nodes in EKS Infrastructure template. This will be recorded in the K8sRBAC.
    Value: !GetAtt CFNServiceRole.Arn